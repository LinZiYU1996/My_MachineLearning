# -*- coding: utf-8 -*-

# @Time  : 2019/12/1 17:05

# @Author : Mr.Lin


import pandas as pd
import numpy as np
from sklearn.datasets import load_iris
import matplotlib.pyplot as plt

"""
感知机

$f(x) = sign(w*x + b)$

损失函数 $L(w, b) = -\Sigma{y_{i}(w*x_{i} + b)}

"""

# 拿出iris数据集中两个分类的数据和[sepal length，sepal width]作为特征




# load data
iris = load_iris()
df = pd.DataFrame(iris.data, columns=iris.feature_names)
df['label'] = iris.target


#
df.columns = ['sepal length', 'sepal width', 'petal length', 'petal width', 'label']
df.label.value_counts()



plt.scatter(df[:50]['sepal length'], df[:50]['sepal width'], label='0')
plt.scatter(df[50:100]['sepal length'], df[50:100]['sepal width'], label='1')
plt.xlabel('sepal length')
plt.ylabel('sepal width')
plt.legend()


# plt.show()



# 格式化数据

data = np.array(df.iloc[:100, [0, 1, -1]])

print("data : \n",data)
print("")
print("")

X, y = data[:,:-1], data[:,-1]

print("X : \n",X)
print("")
print("")

print("y : \n",y)
print("")
print("")


y = np.array([1 if i == 1 else -1 for i in y])

print("y : \n",y)
print("")
print("")




class Model():

    def __init__(self):
        self.w = np.ones(len(data[0]) - 1, dtype=np.float32)
        self.b = 0
        self.l_rate = 0.1


    def sign(self,x,w,b):

        y = np.dot(x,w) + b
        return y



        # 随机梯度下降法

    def fit(self, X_train, y_train):
        is_wrong = False
        while not is_wrong:
            wrong_count = 0
            for d in range(len(X_train)):
                X = X_train[d]
                y = y_train[d]
                if y * self.sign(X, self.w, self.b) <= 0:
                    self.w = self.w + self.l_rate * np.dot(y, X)
                    self.b = self.b + self.l_rate * y
                    wrong_count += 1
            if wrong_count == 0:
                is_wrong = True
        return 'Perceptron Model!'

    def score(self):
        pass


perceptron = Model()

print(perceptron.fit(X,y))


x_points = np.linspace(4, 7,10)
y_ = -(perceptron.w[0]*x_points + perceptron.b)/perceptron.w[1]
plt.plot(x_points, y_)

plt.plot(data[:50, 0], data[:50, 1], 'bo', color='blue', label='0')
plt.plot(data[50:100, 0], data[50:100, 1], 'bo', color='orange', label='1')
plt.xlabel('sepal length')
plt.ylabel('sepal width')
plt.legend()
plt.show()



# data :
#  [[ 5.1  3.5  0. ]
#  [ 4.9  3.   0. ]
#  [ 4.7  3.2  0. ]
#  [ 4.6  3.1  0. ]
#  [ 5.   3.6  0. ]
#  [ 5.4  3.9  0. ]
#  [ 4.6  3.4  0. ]
#  [ 5.   3.4  0. ]
#  [ 4.4  2.9  0. ]
#  [ 4.9  3.1  0. ]
#  [ 5.4  3.7  0. ]
#  [ 4.8  3.4  0. ]
#  [ 4.8  3.   0. ]
#  [ 4.3  3.   0. ]
#  [ 5.8  4.   0. ]
#  [ 5.7  4.4  0. ]
#  [ 5.4  3.9  0. ]
#  [ 5.1  3.5  0. ]
#  [ 5.7  3.8  0. ]
#  [ 5.1  3.8  0. ]
#  [ 5.4  3.4  0. ]
#  [ 5.1  3.7  0. ]
#  [ 4.6  3.6  0. ]
#  [ 5.1  3.3  0. ]
#  [ 4.8  3.4  0. ]
#  [ 5.   3.   0. ]
#  [ 5.   3.4  0. ]
#  [ 5.2  3.5  0. ]
#  [ 5.2  3.4  0. ]
#  [ 4.7  3.2  0. ]
#  [ 4.8  3.1  0. ]
#  [ 5.4  3.4  0. ]
#  [ 5.2  4.1  0. ]
#  [ 5.5  4.2  0. ]
#  [ 4.9  3.1  0. ]
#  [ 5.   3.2  0. ]
#  [ 5.5  3.5  0. ]
#  [ 4.9  3.1  0. ]
#  [ 4.4  3.   0. ]
#  [ 5.1  3.4  0. ]
#  [ 5.   3.5  0. ]
#  [ 4.5  2.3  0. ]
#  [ 4.4  3.2  0. ]
#  [ 5.   3.5  0. ]
#  [ 5.1  3.8  0. ]
#  [ 4.8  3.   0. ]
#  [ 5.1  3.8  0. ]
#  [ 4.6  3.2  0. ]
#  [ 5.3  3.7  0. ]
#  [ 5.   3.3  0. ]
#  [ 7.   3.2  1. ]
#  [ 6.4  3.2  1. ]
#  [ 6.9  3.1  1. ]
#  [ 5.5  2.3  1. ]
#  [ 6.5  2.8  1. ]
#  [ 5.7  2.8  1. ]
#  [ 6.3  3.3  1. ]
#  [ 4.9  2.4  1. ]
#  [ 6.6  2.9  1. ]
#  [ 5.2  2.7  1. ]
#  [ 5.   2.   1. ]
#  [ 5.9  3.   1. ]
#  [ 6.   2.2  1. ]
#  [ 6.1  2.9  1. ]
#  [ 5.6  2.9  1. ]
#  [ 6.7  3.1  1. ]
#  [ 5.6  3.   1. ]
#  [ 5.8  2.7  1. ]
#  [ 6.2  2.2  1. ]
#  [ 5.6  2.5  1. ]
#  [ 5.9  3.2  1. ]
#  [ 6.1  2.8  1. ]
#  [ 6.3  2.5  1. ]
#  [ 6.1  2.8  1. ]
#  [ 6.4  2.9  1. ]
#  [ 6.6  3.   1. ]
#  [ 6.8  2.8  1. ]
#  [ 6.7  3.   1. ]
#  [ 6.   2.9  1. ]
#  [ 5.7  2.6  1. ]
#  [ 5.5  2.4  1. ]
#  [ 5.5  2.4  1. ]
#  [ 5.8  2.7  1. ]
#  [ 6.   2.7  1. ]
#  [ 5.4  3.   1. ]
#  [ 6.   3.4  1. ]
#  [ 6.7  3.1  1. ]
#  [ 6.3  2.3  1. ]
#  [ 5.6  3.   1. ]
#  [ 5.5  2.5  1. ]
#  [ 5.5  2.6  1. ]
#  [ 6.1  3.   1. ]
#  [ 5.8  2.6  1. ]
#  [ 5.   2.3  1. ]
#  [ 5.6  2.7  1. ]
#  [ 5.7  3.   1. ]
#  [ 5.7  2.9  1. ]
#  [ 6.2  2.9  1. ]
#  [ 5.1  2.5  1. ]
#  [ 5.7  2.8  1. ]]
#
#
# X :
#  [[ 5.1  3.5]
#  [ 4.9  3. ]
#  [ 4.7  3.2]
#  [ 4.6  3.1]
#  [ 5.   3.6]
#  [ 5.4  3.9]
#  [ 4.6  3.4]
#  [ 5.   3.4]
#  [ 4.4  2.9]
#  [ 4.9  3.1]
#  [ 5.4  3.7]
#  [ 4.8  3.4]
#  [ 4.8  3. ]
#  [ 4.3  3. ]
#  [ 5.8  4. ]
#  [ 5.7  4.4]
#  [ 5.4  3.9]
#  [ 5.1  3.5]
#  [ 5.7  3.8]
#  [ 5.1  3.8]
#  [ 5.4  3.4]
#  [ 5.1  3.7]
#  [ 4.6  3.6]
#  [ 5.1  3.3]
#  [ 4.8  3.4]
#  [ 5.   3. ]
#  [ 5.   3.4]
#  [ 5.2  3.5]
#  [ 5.2  3.4]
#  [ 4.7  3.2]
#  [ 4.8  3.1]
#  [ 5.4  3.4]
#  [ 5.2  4.1]
#  [ 5.5  4.2]
#  [ 4.9  3.1]
#  [ 5.   3.2]
#  [ 5.5  3.5]
#  [ 4.9  3.1]
#  [ 4.4  3. ]
#  [ 5.1  3.4]
#  [ 5.   3.5]
#  [ 4.5  2.3]
#  [ 4.4  3.2]
#  [ 5.   3.5]
#  [ 5.1  3.8]
#  [ 4.8  3. ]
#  [ 5.1  3.8]
#  [ 4.6  3.2]
#  [ 5.3  3.7]
#  [ 5.   3.3]
#  [ 7.   3.2]
#  [ 6.4  3.2]
#  [ 6.9  3.1]
#  [ 5.5  2.3]
#  [ 6.5  2.8]
#  [ 5.7  2.8]
#  [ 6.3  3.3]
#  [ 4.9  2.4]
#  [ 6.6  2.9]
#  [ 5.2  2.7]
#  [ 5.   2. ]
#  [ 5.9  3. ]
#  [ 6.   2.2]
#  [ 6.1  2.9]
#  [ 5.6  2.9]
#  [ 6.7  3.1]
#  [ 5.6  3. ]
#  [ 5.8  2.7]
#  [ 6.2  2.2]
#  [ 5.6  2.5]
#  [ 5.9  3.2]
#  [ 6.1  2.8]
#  [ 6.3  2.5]
#  [ 6.1  2.8]
#  [ 6.4  2.9]
#  [ 6.6  3. ]
#  [ 6.8  2.8]
#  [ 6.7  3. ]
#  [ 6.   2.9]
#  [ 5.7  2.6]
#  [ 5.5  2.4]
#  [ 5.5  2.4]
#  [ 5.8  2.7]
#  [ 6.   2.7]
#  [ 5.4  3. ]
#  [ 6.   3.4]
#  [ 6.7  3.1]
#  [ 6.3  2.3]
#  [ 5.6  3. ]
#  [ 5.5  2.5]
#  [ 5.5  2.6]
#  [ 6.1  3. ]
#  [ 5.8  2.6]
#  [ 5.   2.3]
#  [ 5.6  2.7]
#  [ 5.7  3. ]
#  [ 5.7  2.9]
#  [ 6.2  2.9]
#  [ 5.1  2.5]
#  [ 5.7  2.8]]
#
#
# y :
#  [ 0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.
#   0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.
#   0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  1.  1.  1.  1.
#   1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.
#   1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.
#   1.  1.  1.  1.  1.  1.  1.  1.  1.  1.]
#
#
# y :
#  [-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
#  -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
#   1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1
#   1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1]


