# -*- coding:utf-8 -*-  
__author__ = 'Mr.Lin'
__date__ = '2019/11/14 16:21'

import numpy as np

"""
高级索引

当选择对象 obj 是非元组序列对象，ndarray（数据类型为整数或bool）
或
具有至少一个序列对象或ndarray（数据类型为integer或bool）的元组时，
将触发高级索引。高级索引有两种类型：整数和布尔值。

高级索引始终返回数据的 副本 （与返回视图的基本切片形成对比）

"""

"""
高级索引的定义意味着x[(1,2,3),]根本不同于x[(1,2,3)]。
后者相当于x[1,2,3]触发基本选择，而前者将触发高级索引。
一定要明白为什么会这样。

同时认识到x[[1,2,3]]将触发高级索引，
而由于上面提到的不推荐的数字兼容性， 
x[[1,2,slice(None)]]将触发基本切片。
"""


"""
纯整数数组索引
当索引包含尽可能多的整数数组时，索引的数组具有维度，索引是直接的，但与切片不同。

高级索引始终作为 一个 整体进行 广播 和迭代：

result[i_1, ..., i_M] == x[ind_1[i_1, ..., i_M], ind_2[i_1, ..., i_M],
                           ..., ind_N[i_1, ..., i_M]]
"""

"""
请注意，结果形状与（广播）索引数组形状 ind_1, ..., ind_N 相同。

"""


x = np.array(
    [
        [1, 2],
        [3, 4],
        [5, 6]
    ]
)

# print("x--------------->",x)
# # print("shape---->",x.shape)
# # print(x[[0, 1, 2], [0, 1, 0]])
"""
输出[1 4 5]
前面列表指定了行索引
后面列表指定了列索引
元素对应 索引分别为
00
11
20


"""
print("---------------------------------------------")


"""
应从每一行中选择特定的元素。 
行索引只是[0，1，2]，列索引指定要为相应行选择的元素，这里是[0，1，0]。 
将两者结合使用，可以使用高级索引解决任务：
"""
x1 = np.array([[1, 2], [3, 4], [5, 6]])
# print("x1 shape ------->",x1.shape)
# print(x1[[0, 1, 2], [0, 1, 0]])
"""
输出
[1 4 5]
"""
# print("---------------------------------------------")


"""
应使用高级索引从4x3数组中选择角元素。 因此，
需要选择列是 [0，2] 中的一个，行是 [0，3] 中的一个的所有元素。 
要使用高级索引，需要显式 选择所有元素。使用前面解释的方法，可以写：
"""

x2 = np.array([[ 0,  1,  2],
            [ 3,  4,  5],
            [ 6,  7,  8],
            [ 9, 10, 11]])
rows = np.array([[0, 0],
                  [3, 3]], dtype=np.intp)
columns = np.array([[0, 2],
                     [0, 2]], dtype=np.intp)
# print(x2[rows, columns])
"""
输出：
[[ 0  2]
 [ 9 11]]
 
 对应元素索引
 00 02 30 32
"""


"""
然而，由于上面的索引数组只是重复它们自己，
所以可以使用广播（比较操作，
如 rows[:, np.newaxis] + columns）来简化这一点：

"""
rows_1 = np.array([0, 3], dtype=np.intp)
columns_1 = np.array([0, 2], dtype=np.intp)

# print(rows_1[:, np.newaxis])
"""
输出
[[0]
 [3]]
"""
# print(x2[rows_1[:, np.newaxis], columns_1])
"""
输出

[[ 0  2]
 [ 9 11]]
"""


"""
这种广播也可以使用 ix_： 功能来实现。

"""
# print(x2[np.ix_(rows_1, columns_1)])
"""
输出
[[ 0  2]
 [ 9 11]]
"""












































