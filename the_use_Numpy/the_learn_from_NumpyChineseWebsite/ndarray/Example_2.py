# -*- coding:utf-8 -*-  
__author__ = 'Mr.Lin'
__date__ = '2019/11/14 16:14'

import numpy as np

"""
索引操作
"""

x = np.array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])

print("x-------->",x)

"""
基本切片语法是 i:j:k，其中 i 是起始索引，j 是停止索引，k 是步骤（k\neq0）。
这将选择具有索引值（在相应的维度中）i, i+k, ..., i+(m-1) k 的 m 个元素，
其中 m = q + (r\neq0)，q 和 r 是 j-i 除以 k 得到的商和余数：j - i = q k + r，
使得i + ( m - 1 ) k < j。
"""
print(x[1:7:2])


"""
负 i 和 j 被解释为 n + i 和 n + j ，
其中 n 是相应维度中的元素数量。负 k 使得踩踏指向更小的指数。
"""

print(x[-2:10])
print("-----------------------")
print(x[-3:3:-1])


"""
假设n是被切片的维度中的元素的数量。 
然后，如果没有给出 i，则对于 k > 0 ，
它默认为 0，对于 k < 0，它默认为 n - 1。 
如果没有给出j，则对于k > 0，它默认为n，对于k < 0，则默认为 - n - 1。 
如果没有给定k，则默认为1。请注意 :: 与 : 相同，表示选择沿此轴的所有索引。
"""
print("-------------------------")
print(x[5:])


"""
如果选择元组中的对象数小于 N ，则 : 假定任何后续维
"""
xx = np.array(
    [
        [
            [1],[2],[3]

        ],

        [

            [4],[5],[6]

        ]
    ]
)
print("xx shape----->",xx.shape)
print("-------------------------")
print(xx[1:2])
print("-------------------------")

"""
Ellipsis扩展:为选择元组索引所有维度所需的对象数。在大多数情况下，这意味着扩展选择元组的长度是x.ndim。可能只存在一个省略号
"""
print(x[...,0])


